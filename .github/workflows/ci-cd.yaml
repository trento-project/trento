name: Continous Integration and Demo Deployment
on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]
env:
  PACKAGE_NAME: trento
  OBS_USER: ${{ secrets.OBS_USER }}
  OBS_PASS: ${{ secrets.OBS_PASS }}
  OBS_PROJECT: ${{ secrets.OBS_PROJECT}}
  TARGET_PROJECT: ${{ secrets.TARGET_PROJECT}}
  FOLDER: packaging/suse
  REPOSITORY: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: get git tags
        run: git fetch --prune --unshallow --tags
      - name: install-mockery
        run: go install github.com/vektra/mockery/v2
      - name: test
        run: make test
      - name: static analysis
        run: make vet-check
      - name: coding styles
        run: make fmt-check
      - name: frontend lint and coding style check
        run: make web-check
  build:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: get git tags
        run: git fetch --prune --unshallow --tags
      - name: build
        run: make -j4 cross-compiled
      - name: compress
        run: |
          set -x
          for FILE in build/*; do
            gzip $FILE
          done
      - uses: actions/upload-artifact@v2
        with:
          name: trento-binaries
          path: build
      - uses: actions/upload-artifact@v2
        with:
          name: trento-amd64-binary
          path: build/trento-amd64.gz

  install-server:
    runs-on: [ self-hosted, trento-gh-runner ]
    #needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    environment: AZURE_DEMO
    env:
      TRENTO_SERVER_IP: ${{ secrets.TRENTO_SERVER_IP }}      
      TARGET_USER: ${{ secrets.TARGET_USER }}
    steps:
      - uses: actions/checkout@v2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: unnecessary
          if_key_exists: replace
          config: ${{ secrets.SSH_CONFIG }}
      - name: deploy trento services on K3S cluster
        run: ssh "$TARGET_USER@$TRENTO_SERVER_IP" "sudo bash -s" -- < ./install-server.sh -p ~/.ssh/id_rsa

  deploy-agents:
    runs-on: [ self-hosted, trento-gh-runner ]
    needs: install-server
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    environment: AZURE_DEMO
    env:
      TRENTO_TARGET_AGENTS: ${{ secrets.TRENTO_TARGET_AGENTS }}
      TARGET_USER: ${{ secrets.TARGET_USER }}
      TRENTO_SERVER_IP: ${{ secrets.TRENTO_SERVER_IP }}
    steps:
      - uses: actions/checkout@v2
      - name: install and enable agents
        run: |
          set -ex
          for target_host in ${TRENTO_TARGET_AGENTS//,/ }
          do
            ssh "$TARGET_USER@$target_host" "sudo bash -s" -- < ./install-agent.sh "--agent-bind-ip" "$target_host" "--server-ip" "$TRENTO_SERVER_IP"
            ssh "$TARGET_USER@$target_host" "sudo systemctl enable --now trento-agent.service"
          done

  upload-release-assets:
    needs: build
    if: github.event.release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: trento-binaries
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: "trento-*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: "${{ github.event_name == 'release' && github.event.release.tag_name || 'rolling' }}"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  commit-obs:
    needs: test
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/main'
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:        
        GITHUB_OAUTH_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
    # OSC credentials must be configured beforehand as the HOME variables cannot be changed from /github/home
    # that is used to run osc commands
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc    
    - name: prepare tranto.changes file
      run: |
        VERSION=$(hack/get_version_from_git.sh)
        TAG=$(echo $VERSION | cut -f1 -d+)
        .ci/gh_release_to_obs_changeset.py $REPOSITORY -a shap-staff@suse.de -t $TAG -f $FOLDER/trento.changes
    - name: prepare _service file
      run: |
        VERSION=$(hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: commit changes into OBS
      run: cp $FOLDER/_service . && /scripts/upload.sh

  submit-obs:  
    needs: commit-obs
    runs-on: ubuntu-18.04
    if: github.event.release
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc
    - name: prepare _service file
      run: |
        VERSION=$(hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: submit package
      run: cp $FOLDER/_service . && /scripts/submit.sh
